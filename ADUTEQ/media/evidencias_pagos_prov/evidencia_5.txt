--------------------------------------------------------------------------
-------------------TRIGER PARA GENERAR COD PRODUCTO
--------------------------------------------------------------------------

-- Crear una secuencia para generar el número serial
CREATE SEQUENCE ProductoSerial
    START WITH 1
    INCREMENT BY 1;
	go
-- Crear un trigger para generar el CodProducto
 Create TRIGGER GenerateCodProducto
ON Productos
INSTEAD OF INSERT
AS
BEGIN
    DECLARE @CodTipo VARCHAR(10);
    DECLARE @CodCategoria VARCHAR(10);
    DECLARE @Serial INT;
    DECLARE @InsertedID INT;
	DECLARE @CodPro varchar(20);

    SELECT @InsertedID = i.CodProducto, @CodCategoria = i.CodCategoria
    FROM inserted i;

    SELECT @CodTipo = CodTipo
    FROM Categoria
    WHERE CodCategoria = @CodCategoria;

    SELECT @Serial = NEXT VALUE FOR ProductoSerial;
	
    select @CodPro  =  @CodTipo + @CodCategoria + CAST(@Serial AS VARCHAR)
       INSERT INTO Productos (NomProducto, CodCategoria, CodProveedor, UM, CodUMedida, Precio_unitario, Descripcion, Fecha_creacion, Fecha_modificacion, Foto, Estado, CodProducto)
    SELECT
        i.NomProducto,
        i.CodCategoria,
        i.CodProveedor,
        i.UM,
        i.CodUMedida,
        i.Precio_unitario,
        i.Descripcion,
        GETDATE(),
        GETDATE(),
        i.Foto,
        i.Estado,
		@CodPro
    FROM inserted i;
END;
--------------------------------------------------------------------------
-----------------------------TRIGER DE LA LINEA
--------------------------------------------------------------------------
go
create procedure pr_trg_Movimiento_linea(@serial int)
as
begin
	
end;
go
create trigger trg_Movimiento_linea
ON Movimientos
after insert
as
begin

	--declare @Serial int;
	--SELECT @Serial = NEXT VALUE FOR ProductoSerialLinea;
    UPDATE Movimientos
    set Linea = 'L'+  CAST(inserted.CodDiario AS VARCHAR)+  CAST(inserted.CodBodega AS VARCHAR)+  inserted.Linea,
	CostoTotal = (inserted.Cantidad*inserted.CostoUnitario)
    from Movimientos
    inner join inserted on Movimientos.CodMov= inserted.CodMov;
	end;


CREATE SEQUENCE ProductoSerialLinea
    START WITH 1
    INCREMENT BY 1;
	go


--------------------------------------------------------------------------
--------------------------TREGGER MOVIMIENTOS
--------------------------------------------------------------------------

insert into Periodo(Anio, Mes, Fecha_inicio,Fecha_final,Activo)
values ('2023','8','30/08/2023','30/09/2023',1) ,--periodo actual
 ('2023','8','30/07/2023','30/08/2023',0)

--INSERT INTO ProductosxBodega (CodProducto, CodBodega, StockActual, StockMin, StockMax, StockSeg, CostoUnitario, Descripcion)
--VALUES ('FOODCAT0011', 1, 150, 50, 500, 100, 10.50, 'Producto de ejemplo 1'),
--('FOODCAT0022', 1, 50, 50, 500, 100, 10.50, 'Producto de ejemplo 2');



insert into Diario(CodPeriodo,TotalEntCantPro, TotalEntCostoPro,TotalSalCantPro,TotalSalCostoPro)
values(1,0,0,0,0)

go

INSERT INTO Movimientos (Linea, Tipo, CodTipoMov,CodDiario, CodProducto, CodBodega,Fecha, Cantidad, CostoUnitario, CostoTotal, Observacion)
VALUES
('1', 'I', 'R',2, 'FOODCAT0014', 1,'30/08/2023', 100, 10.50, 1050.00, 'Entrada de productos') ,
('1', 'I', 'R',2, 'FOODCAT0025', 2,'30/08/2023', 150, 15.50, 1050.00, 'Entrada de productos'),
('1', 'E', 'C',2, 'FOODCAT0014', 1,'30/08/2023', 25, 10.50, 1050.00, 'Salida de productos') ,
('1', 'E', 'C',2, 'FOODCAT0025', 2,'30/08/2023', 25, 15.50, 1050.00, 'Salida de productos')


delete Movimientos

go
select * from Productos
select * from Diario
select * from Movimientos
select * from ProductosxBodega
select * from Periodo


---------------------------------------PROCEDIMIENTO PARA INGRESARLO POR XML
DECLARE @XmlData XML
SET @XmlData = '<movimientos><movimiento><Linea>Linea1</Linea><Tipo>I</Tipo> <CodTipoMov>R </CodTipoMov> <CodDiario>1 </CodDiario><CodProducto>ELECCAT01216</CodProducto><CodBodega>4</CodBodega><Cantidad>13</Cantidad><CostoUnitario>218.4</CostoUnitario></movimiento></movimientos>'

CREATE PROCEDURE InsertarMovimientosDesdeXML3  @reg varchar (max)
as
Declare @XMl XML
Begin
		set @XMl=@Reg
		insert into  Movimientos (Linea, Tipo, CodTipoMov, CodDiario, CodProducto, CodBodega,  Cantidad, CostoUnitario) 
		SELECT M.Item.query('./Linea').value('.','varchar(10)') Linea,
				M.Item.query('./Tipo').value('.','CHAR(1)') Tipo,
				M.Item.query('./CodTipoMov').value('.','CHAR(1)') CodTipoMov,
				M.Item.query('./CodDiario').value('.','int') CodDiario,
				M.Item.query('./CodProducto').value('.','varchar(20)') CodProducto,
				M.Item.query('./CodBodega').value('.','int') CodBodega,
				M.Item.query('./Cantidad').value('.','int') Cantidad,
				M.Item.query('./CostoUnitario').value('.','decimal(7,2)') CostoUnitario
		FROM @XML.nodes('/movimientos/movimiento') AS M(Item)
End


DROP TRIGGER Trg_InsertMovimiento
CREATE TRIGGER Trg_InsertMovimiento
ON Movimientos
After  INSERT
AS
BEGIN
	----------------------------DIARIO
	----------------------------
    DECLARE @FechaMovimiento DATE;
    DECLARE @CodDiario INT;
    -- Obtener la fecha del movimiento recién insertado
    SELECT @FechaMovimiento = CONVERT(date, Fecha) FROM Inserted;
    -- Verificar si ya existe un Diario para la fecha del movimiento
    SELECT @CodDiario = CodDiario FROM Diario WHERE Fecha = @FechaMovimiento;
    -- Si no existe, crear un nuevo Diario
    IF @CodDiario IS NULL
    BEGIN
        INSERT INTO Diario (Fecha,CodPeriodo, TotalEntCantPro, TotalEntCostoPro, TotalSalCantPro, TotalSalCostoPro)
        SELECT
            @FechaMovimiento,(select CodPeriodo from Periodo where Activo = 1),
            SUM(CASE WHEN Tipo = 'I' and CodTipoMov = 'R' THEN Cantidad ELSE 0 END),
            SUM(CASE WHEN Tipo = 'I' and CodTipoMov = 'R' THEN CostoTotal ELSE 0 END),
            SUM(CASE WHEN Tipo = 'E' and CodTipoMov = 'C' THEN Cantidad ELSE 0 END),
            SUM(CASE WHEN Tipo = 'E' and CodTipoMov = 'C' THEN CostoTotal ELSE 0 END)
        FROM Inserted;
		
    END
    ELSE
    BEGIN
        -- Actualizar Diario existente
        UPDATE D
        SET
            TotalEntCantPro = D.TotalEntCantPro + ISNULL((SELECT SUM(Cantidad) FROM Inserted WHERE Tipo = 'I'and CodTipoMov = 'R'), 0),
            TotalEntCostoPro = D.TotalEntCostoPro + ISNULL((SELECT SUM(CostoTotal) FROM Inserted WHERE Tipo = 'I'and CodTipoMov = 'R'), 0),
            TotalSalCantPro = D.TotalSalCantPro + ISNULL((SELECT SUM(Cantidad) FROM Inserted WHERE Tipo = 'E'and CodTipoMov = 'C'), 0),
            TotalSalCostoPro = D.TotalSalCostoPro + ISNULL((SELECT SUM(CostoTotal) FROM Inserted WHERE Tipo = 'E'and CodTipoMov = 'C'), 0)
        FROM Diario D
        WHERE D.CodDiario = @CodDiario;
    END;
	----------------------------
	----------------------------DIARIO KARDEX
	 -- Verificar si ya existe un Diario para la fecha del movimiento
    SELECT @CodDiario = CodDiario FROM Diario WHERE Fecha = @FechaMovimiento;
	
	DECLARE @CodDiarioK int;
	DECLARE @CodProducto varchar(29);
	select @CodProducto = CodProducto from inserted
	SELECT @CodDiarioK = CodDiario FROM DiarioKardex WHERE CodDiario = @CodDiario and CodProducto = @CodProducto;

    IF @CodDiarioK is null
    BEGIN
		INSERT INTO DiarioKardex(CodDiario, Fecha,CodProducto, EntCantPro, EntCostoPro, SalCantPro, SalCostoPro)
			VALUES (@CodDiario, @FechaMovimiento,@CodProducto,
					ISNULL((SELECT SUM(Cantidad) FROM Inserted WHERE Tipo = 'I'and CodTipoMov = 'R'), 0),
					ISNULL((SELECT SUM(CostoTotal) FROM Inserted WHERE Tipo = 'I'and CodTipoMov = 'R'), 0),
					ISNULL((SELECT SUM(Cantidad) FROM Inserted WHERE Tipo = 'E'and CodTipoMov = 'C'), 0),
					ISNULL((SELECT SUM(CostoTotal) FROM Inserted WHERE Tipo = 'E'and CodTipoMov = 'C'), 0));
	END
	else
	BEGIN
        -- Actualizar Diario existente
        UPDATE Dk
        SET
            EntCantPro = Dk.EntCantPro + ISNULL((SELECT SUM(Cantidad) FROM Inserted WHERE Tipo = 'I'and CodTipoMov = 'R'), 0),
            EntCostoPro = Dk.EntCostoPro + ISNULL((SELECT SUM(CostoTotal) FROM Inserted WHERE Tipo = 'I'and CodTipoMov = 'R'), 0),
            SalCantPro = Dk.SalCantPro + ISNULL((SELECT SUM(Cantidad) FROM Inserted WHERE Tipo = 'E'and CodTipoMov = 'C'), 0),
            SalCostoPro = Dk.SalCostoPro + ISNULL((SELECT SUM(CostoTotal) FROM Inserted WHERE Tipo = 'E'and CodTipoMov = 'C'), 0)
        FROM DiarioKardex Dk
        WHERE Dk.CodDiario = @CodDiario and Dk.CodProducto = @CodProducto;
    END;
END;

DROP TRIGGER Trg_ActualizarStock
CREATE TRIGGER Trg_ActualizarStock
ON Movimientos
AFTER INSERT
AS
BEGIN


    -- Insertar en ProductosxBodega si no existe algún registro
    INSERT INTO ProductosxBodega (CodProducto, CodBodega, StockActual, StockMin, StockMax,StockSeg, I.CostoUnitario, Descripcion)
    SELECT I.CodProducto, I.CodBodega, I.Cantidad, 0, 500,200, 10.5, ''
    FROM Inserted I
    LEFT JOIN ProductosxBodega PB ON I.CodProducto = PB.CodProducto AND I.CodBodega = PB.CodBodega
    WHERE I.Tipo = 'I' AND PB.CodProducto IS NULL;

    -- Actualizar ProductosxBodega para movimientos de tipo 'I'
    UPDATE PB
    SET
        StockActual = PB.StockActual + I.Cantidad
    FROM ProductosxBodega PB
    INNER JOIN Inserted I ON PB.CodProducto = I.CodProducto AND PB.CodBodega = I.CodBodega
    WHERE I.Tipo = 'I';

    -- Actualizar ProductosxBodega para movimientos de tipo 'E'
    UPDATE PB
    SET
        StockActual = PB.StockActual - I.Cantidad
    FROM ProductosxBodega PB
    INNER JOIN Inserted I ON PB.CodProducto = I.CodProducto AND PB.CodBodega = I.CodBodega
    WHERE I.Tipo = 'E';

END;
